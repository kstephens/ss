#!/usr/bin/env perl
print "#ifndef ss_ctypedef_def\n#define ss_ctypedef_def(_1,_2,_3,_4,_5)\n#endif\n";
print "#ifndef ss_cstruct_decl\n#define ss_cstruct_decl(_1,_2,_3,_4)\n#endif\n";
print "#ifndef ss_cstruct_def\n#define ss_cstruct_def(_1,_2,_3,_4)\n#endif\n";
print "#ifndef ss_cstruct_element_def\n#define ss_cstruct_element_def(_1,_2,_3,_4,_5,_6,_7,_8,_9)\n#endif\n";
print "#ifndef ss_cstruct_elemptr_def\n#define ss_cstruct_elemptr_def(_1,_2,_3,_4,_5,_6,_7,_8,_9)\n#endif\n";
print "#ifndef ss_cfunc_def\n#define ss_cfunc_def(_1,_2,_3,_4,_5,_6,_7,_8,_9)\n#endif\n";
%types = ();
%real_types =
  (
   'ss', 'ss',
   'long unsigned int', 'unsigned long',
   'unsigned long int', 'unsigned long',
   'long long int', 'long long',
   'unsigned long long int', 'unsigned long long',
   'unsigned', 'unsigned int',
   'signed char', 'char',
   'signed short', 'short',
   'signed int', 'int',
   'signed long', 'long',
   'signed long int', 'long',
   'long int', 'long',
   'long signed int', 'long',
   'signed long long', 'long long',
   'long long int', 'long long',
   'signed long long int', 'long long',
);
sub to_real_type {
  my ($t) = @_;
  my ($x, $y, $ptr);
  $t =~ s/\s+$//;
  while ( $t =~ s/\s+\*/*/g ) { }
  $x = $t;
  $ptr = ($x =~ s/([*]+)$// ? $1 : '');
  do {
    $y = $x;
    $x = $real_types{$y} || $y;
  } while ( $y ne $x );
  $x .= $ptr;
  $real_types{$t} ||= $x;
  # print STDERR "  to_real_type($t) => |$x| ptr=|$ptr|\n";
  $x;
}
%typedefs = ();
sub typedef {
  my ($e_type, $e_name, $e_type_m) = @_;
  while ( $e_type =~ s/\s+\*/*/g ) { }
  $e_type =~ s/\s+$//;
  ($e_type_m = $e_type) =~ tr/ *[]/_PAA/;
  $key = "$e_type,$e_type_m,$e_name,\"$file\",$lineno";
  $typedefs{$e_name} = $e_type;
  # print STDERR "  typedef($e_name) => |$e_type|\n";
  $real_types{$e_name} ||= to_real_type($e_type);
  # print STDERR "  TYPEDEF $key\n";
  print "ss_ctypedef_def($key)\n";
}

%structs_forward = ();
%structs = ();
sub struct {
  my ($type, $def) = @_;
  if ( $type =~ /^\s*(struct|union)\s+([_a-zA-Z][_a-zA-Z0-9]*)/ ) {
    my ($struct_type, $struct_name) = ($1, $2);
    my $key = "$struct_type,$struct_name";
    my $val = "$key,\"$file\",$lineno";
    if ( $def ) {
      delete $structs_forward{$key};
      if ( ! $structs{$key} ) {
        $structs{$key} = $val;
        # print STDERR "  struct $key\n";
        print "ss_cstruct_def($val)\n";
      }
    } else {
      $structs_forward{$key} = $val if ( ! $structs{$key} );
    }
  }
}

%elements = ();
%funcs = ();
$file = "stdin";
$lineno = 0;
$in_struct = 0;
my $in_expr = 0;
$name_re = "([_a-zA-Z][_a-zA-Z0-9]*)";
$array_x_re = "((\\[\\d\\s]*\\])+)";
$array_re = "((\\[\\d\\s]*\\])*)";
$_ = '';
while ( $line = <> ) {
  $_ .= $line;
  # print STDERR "  line |$_|\n" if ( /^\s*#/ );
  if (      s/^\s*#\s*(\d+)\s+"([^"]+)"(\s*\d+)*/ / ) {
    $lineno = $1; $file = $2;
    next;
  } elsif ( s/^\s*#\s*(\d+)\s+/ / ) {
    $lineno = $1;
    next;
  }
  $lineno ++;
  s/[\r\n\t]/ /g;

  $typedef_re = join("|", map { "$_\\b" } sort { length($b) <=> length($a) } keys %typedefs);
  $typedef_re = "|$typedef_re" if ( $typedef_re ne '' );
  $type_re = "(struct\\s+$name_re|union\\s+$name_re|long\\s+unsigned\\s+int\\b|unsigned\\s+char\\b|unsigned\\s+short\\b|unsigned\\s+int\\b|unsigned\\s+long\\s+long\\b|unsigned\\s+long\\b|unsigned\\b|signed\\s+char\\b|signed\\s+short\\b|signed\\s+int\\b|signed\\s+long\\b|signed\\b|char\\b|short\\b|long\\s+int\\b|long\\s+long\\s+int\\b|long\\s+long\\b|long\\s+double\\b|float\\b|double\\b|int\\b|long\\b|void\\b|__builtin_va_list\\b$typedef_re)";
  if ( $type_re_last ne $type_re ) {
    $type_re_last = $type_re;
    # print STDERR "  type_re = $type_re\n";
  }
  $type_ptr_re = "($type_re\[*\\s\]*)";
  $param_re = "($type_ptr_re\\s*$name_re?\s*$array_re|[.][.][.])";
  chomp;
  s/\b(extern|static|__inline(__)?|inline|__restrict(__)?|__format|restrict|const|register|__pure2|__dead2|__extension(__)?)\b//g;
  s/\b__attribute(__)?\s*[(]\s*[(]([^)]*|[(][^)]*[)])*[)]\s*[)]//g;
  s/\b__asm(__)?\s*[(][^)]*[)]//g;
  s/\[\s*\]/*/g;
  s/^([a-z0-9_]+)\s+(([*]\s*)+)/$1$2 /i;
  $pre_line = $_;
  # if ( /^\s*$type_re/ ) { print STDERR "  type |$1|\n"; }
  if ( s/^\s*[(]\s*[{]// ) {
    $in_expr ++;
  } elsif ( $in_expr && s/^\s*[}]\s*[)]// ) {
    $in_expr --;
  } elsif ( $in_expr ) {
    s/^.//;
  } elsif ( s/^\s*(typedef)\s+// ) {
    # print STDERR "  typedef $_...\n";
    $in_typedef = 'typedef';
  } elsif ( s/^\s*(struct|union)\s+$name_re\s*[;]// ) {
    # print STDERR "  forwd struct |$_|\n";
    $struct_type = $1;
    $struct_name = $2;
    struct("$struct_type $struct_name", 0);
  } elsif ( s/^\s*(struct|union)\s+$name_re\s*[{]// ) {
    $in_struct ++;
    # print STDERR "  begin struct |$_|\n";
    $struct_type = $1;
    $struct_name = $2;
    struct("$struct_type $struct_name", 1);
  } elsif ( $in_struct > 0 && s/^\s*}([\s*]*)$name_re\s*$array_re\s*;// ) {
    $in_struct --;
    my ($ptr, $name, $array) = ($1, $2, $3);
    # print STDERR "  struct end |$ptr| |$name| |$array| $in_typedef\n" if ( $in_struct == 0 );
    if ( $in_struct == 0 && $name ne '' ) {
      if ( $in_typedef ) {
        while ( $ptr =~ s/\s+\*/*/g ) { }
        while ( $array =~ s/\s+//g ) { }
        $e_name = $name;
        $e_type = "$struct_type $struct_name$ptr$array";
        typedef($e_type, $e_name);
        $in_typedef = 0;
      }
    }
    # print STDERR "  end struct |", $_, "|\n";
  } elsif ( $in_struct > 0 && s/^\s*}// ) {
    $in_struct --;
  } elsif ( s/^\s*$type_re([*\s]*$name_re\s*$array_re(:\s*\d+)?(\s*,[*\s]*$name_re\s*$array_re(:\s*\d+)?)*)\s*;// ) {
    # print STDERR " decl match 1|$1| 2|$2| 3|$3| 4|$4| 5|$5| 6|$6|\n";
    my ($element_type, $element_names) = ($1, $4);
    $element_type =~ s/^\s+|\s+$//g;
    # $element_type = $t if ( $t = $typedefs{$element_type} );
    $element_names =~ s/^\s+|\s+$//g;
    $_in_typedef = $in_typedef;
    foreach my $e_name ( split(/\s*,\s*/, $element_names) ) {
      my ($e_type, $e_type_m) = ( $element_type );
      # print STDERR "      ELEMENT |$e_type| |$e_name|\n";
      my $e_bitfield = '0';
      $e_bitfield = $1 if ( $e_name =~ s/\s*:\s*(\d+)\s*$// );
      $e_type .= $1  if ( $e_name =~ s/^\s*([*\s]+)// );
      $e_type .= '*' if ( $e_name =~ s/\s*$array_x_re\s*$// );
      $e_type =~ s/^\s+|\s+$//g;
      $e_type =~ s/\s\s+/ /g;
      $e_type_r = to_real_type($e_type);
      while ( $e_type =~ s/\s+\*/*/g ) { }
      while ( $e_type_r =~ s/\s+\*/*/g ) { }
      struct($e_type, 0);
      ($e_type_m = $e_type_r) =~ tr/ *[]/_PAA/;
      if ( 0 ) {
      } elsif ( $in_struct > 0 ) {
        $key = "$struct_type,$struct_name,$e_name";
        if ( ! $elements{$key} ) {
          $elements{$key} = 1;
          $key = "$struct_type,$struct_name,$e_type,$e_type_r,$e_type_m,$e_name,$e_bitfield,\"$file\",$lineno";
          # print STDERR "    element $key\n";
          print "ss_cstruct_element_def($key)\n";
          if ( $e_bitfield eq '0' ) {
            print "ss_cstruct_elemptr_def($key)\n";
          }
        }
      } elsif ( $_in_typedef ) {
        $in_typedef = 0;
        typedef($e_type, $e_name);
      }
    }
  } elsif ( s/^\s*$type_ptr_re\s*$name_re\s*[(]\s*(void\b|($param_re(\s*,\s*$param_re)*)|)\s*[)]\s*[;{]// ) {
    # print STDERR " func match 1|$1| 2|$2| 3|$3| 4|$4| 5|$5| 6|$6|\n";
    my ($rtn_type, $func_name, $args) = ($1, $5, $6);
    my ($rtn_type_r, $rtn_type_m);
    while ( $rtn_type =~ s/\s+\*/*/g ) { }
    $rtn_type =~ s/^\s+|\s+$//g;
    $rtn_type_r = to_real_type($rtn_type);
    ($rtn_type_m = $rtn_type) =~ tr/ *[]/_PAA/;
    ($rtn_type_r = $rtn_type_r) =~ tr/ *[]/_PAA/;
    $func_name =~ s/^\s+|\s+$//g;
    $args =~ s/^\s+|\s+$//g;
    $args = '' if ( $args eq 'void');
    # print STDERR "  func |$rtn_type| |$func_name| |$args|\n";
    # $element_type = $t if ( $t = $typedefs{$element_type} );
    $args =~ s/,\s*[.][.][.]\s*$//; # FIXME: vararg decl.
    @args = split(/\s*,\s*/, $args);
    $args_n = @args;
    @args_m = ();
    @args_s = ();
    foreach my $arg ( @args ) {
      $arg =~ /^\s*$type_ptr_re\s*$name_re?\s*$array_re/;
      my ($a_type, $a_name, $a_array) = ($1, $3, $5);
      my $a_i = @args_m;
      $a_type .= '*' if ( $a_name =~ s/\s*$array_x_re\s*$// );
      struct($a_type, 0);
      $a_name = "_$a_i"; # ||= ???
      while ( $a_type =~ s/\s+\*/*/g ) { }
      $a_type =~ s/^\s+|\s+$//g;
      $r_type = to_real_type($a_type);
      ($a_type_m = $a_type) =~ tr/ *[]/_PAA/;
      ($r_type_m = $r_type) =~ tr/ *[]/_PAA/;
      # print STDERR "      PARAM |$a_type| => |$r_type| |$a_name| \n";
      push(@args_m, "PARAM($a_type,$a_type_m,$r_type_m,$a_i,$a_name)");
      push(@args_s, $a_type);
    }
    $args_m = join(',', @args_m);
    $args_s = join(',', @args_s);
    if ( ! $funcs{$func_name} ) {
      $funcs{$func_name} = 1;
      $key = "$rtn_type,$rtn_type_m,$rtn_type_r,$func_name,$args_n,PARAMS_$args_n($args_m),\"$args_s\",\"$file\",$lineno";
      if ( $func_name !~ /^(alloca|getchar_unlocked|putc_unlocked|__vsprintf_chk|__vsnprintf_chk|zopen|unwhiteout|GC_win32_free_heap|add_profil|profil|putc|__sputc)$/ ) {
        print "ss_cfunc_def($key)\n";
      }
    }
  } elsif ( $in_struct > 0 ) {
    # print STDERR "  in struct |", $pre_line, "|\n" if /\*/;
    s/^[^;]*;//;
  } elsif ( s/^\s*}\s*// ) {
  } elsif ( s/^\s*;\s*// ) {
  } else {
    if ( /exit/ && /^([^\(]+[(][^\)]+[)]\s*[;{])/ ) {
      print STDERR "  unmatch func? |$1|\n";
      if ( s/^\s*$type_ptr_re// ) {
        print STDERR "    rtn_type=|$1|\n";
        if ( s/^\s*$name_re// ) {
          print STDERR "    func_name=|$1|\n";
          if ( s/^\s*[(]// ) {
            print STDERR "    (\n";
            while ( s/^\s*$type_ptr_re\s*$name_re?// ) {
              print STDERR "      arg_type=|$1| arg_name=|$4|\n";
              s/^\s*,//;
            }
          }
        }
      }
    }
    s/^[^;]*;//;
  }
}
for my $k ( sort keys %structs_forward ) {
  my $key = $structs_forward{$k};
  print "ss_cstruct_decl($key)\n";
}
print "#undef ss_cstruct_decl\n";
print "#undef ss_cstruct_def\n";
print "#undef ss_cstruct_element_def\n";
print "#undef ss_cstruct_elemptr_def\n";
print "#undef ss_ctypedef_def\n";
print "#undef ss_cfunc_def\n";

