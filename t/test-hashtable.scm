(load-file "lib/hashtable.scm")

(define eq?-hash C:ss_eqQ_hash)

#;
(let ((l '((a 1) (b 2) (c 3))))
  (test equal? l '((a 1) (b 2) (c 3)))
  (%assrm eq? 'a l)
  (test equal? l '((a 1) (b 2) (c 3)))
  (%assrm eq? 'b l)
  (test equal? l '((a 1) (c 3)))
  (%assrm eq? 'x l)
  (test equal? l '((a 1) (c 3)))
  )

(let ((ht (make-hash-table eq? eq?-hash)))
  (test eq? (hash-table-size ht) 0)
  (test eq? (hash-table-ref/default ht 'a 'unknown) 'unknown)
  (test equal? (hash-table-keys ht) '())
  (test equal? (hash-table-values ht) '())
  (hash-table-set! ht 'a 1)
  (test eq? (hash-table-ref/default ht 'a 'unknown) 1)
  (test eq? (hash-table-ref         ht 'a         ) 1)
  (test equal? (hash-table-keys ht) '(a))
  (test equal? (hash-table-values ht) '(1))
  (hash-table-set! ht 'b 2)
  (test eq? (hash-table-size ht) 2)
  (test eq? (hash-table-ref/default ht 'a 'unknown) 1)
  (test eq? (hash-table-ref/default ht 'b 'unknown) 2)
  (hash-table-delete! ht 'a)
  (test eq? (hash-table-ref/default ht 'a 'unknown) 'unknown)
  (test eq? (hash-table-ref/default ht 'b 'unknown) 2)
  (hash-table-delete! ht 'b)
  (test eq? (hash-table-ref/default ht 'a 'unknown) 'unknown)
  (test eq? (hash-table-ref/default ht 'b 'unknown) 'unknown)
  )

(let ((ht (make-hash-table eq? (lambda (x) 5) 10)))
  (hash-table-set! ht 'a 1)
  (hash-table-set! ht 'b 2)
  (test eq? (%hash-table-length ht) 10)
  (test eq? (hash-table-ref/default ht 'a 'unknown) 1)
  (test eq? (hash-table-ref/default ht 'b 'unknown) 2)
  (hash-table-delete! ht 'a)
  (test eq? (hash-table-ref/default ht 'a 'unknown) 'unknown)
  (test eq? (hash-table-ref/default ht 'b 'unknown) 2)
  (hash-table-delete! ht 'b)
  (test eq? (hash-table-ref/default ht 'a 'unknown) 'unknown)
  (test eq? (hash-table-ref/default ht 'b 'unknown) 'unknown)
  )

'ok
